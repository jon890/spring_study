버전5
-> 글쓰기에 파일업로드 기능 추가 (MultiPartHttpRequest)
-> 글쓰기에 답글 기능 추가 (json)



버전6 (0517 ~ 0518)
-> root, servlet위치를 resources로 변경 (jUnit) (0517)
   // junit (테스트 역할)
   // WEB-INF/~ 등으로 경로를 주면 junit이 읽어 들일 수 없다
   // classpath: 속성으로 줘야 설정파일을 읽어 들일 수 있음
   
   
-> user generated key 사용 (0517)
-> transaction 사용
-> 로그인 기능을 interceptor을 이용
-> 원글을 지우면 답글도 모두 삭제하도록 (계층형 쿼리 연습, IN 연습)
-> jUnit 사용
-> 형상관리 (svn서버, git)



버전7 (0523)
오전..
-> AOP(Aspect Oriented Programming) vs 인터셉트
-> 핵심 기능과 부가 기능을 분리하기 위한 로직
-> 기능 중심 프로그래밍
-> 인터셉트와 달리 요청이름이 아닌 메소드 이름으로 동작한다 (와일드카드 사용가능)
-> notice, bbs의 모든 write 메소드에 login 유무를 처리하자
-> PointCut(어디 -> 메소드 지정)  +  Advice(언제, 무엇을 -> PointCut에 지정한 메소드 실행 전 후, 부가기능) = Advisor
-> xml방식  // Aspect Class 방식 @Aspect (이 것을 사용) (AspectJrt Runtime 필요)
-> Pointcut에 지정된 메소드가 받아들이는 매개변수를 모두 받을 수 있다
-> 필요 파일
	// AspectJrt 1.9.1 (pom.xml에서 버전만 바꿔주기) .. AspectJ 언어를 위해 필요
	// AOP Alliance Spring 3.X 에서만 필요하다.
	// AspectJWeaver
-> Advise (Before, After, Around)
-> Around에서 Before과 After를 구분하는 것 proceed


오후.. 
-> 이펙티브 자바 2판 , JVM Performance Optimizing 및 성능분석 사례 (추천도서)
-> TDD (Test Driven Development), Agile Process

-> JUnit (테스트)
-> WAS를 구동하지 않고 테스트한다
-> Connection Pool을 사용할 수 없다. (WAS가 시작되야 DB Connection들을 만들기 때문)
	// 따라서 개발할 때는 Connection Pool을 사용하지 않고, 개발이 완료 되면 Connection Pool을 사용한다.
-> 설정파일에서 주의점..
	// 파일을 읽어들일 때, 다른 파일이 부른 파일은 classpath: 속성으로 불러야 한다.
	
	
	
버전8 (0523 ~28)
-> 비동기 업로드
-> 썸네일 이미지


-> write.bbs에서 fileNames를 받을 때
-> List<String> 으로 받으면
-> can't instantiate
-> DI 받을 수 있는 것 DTO 객체나, 바로 생성자를 사용할 수 있는 String..
-> 따라서 스트링형 배열로 받을 수 있다
-> ArrayList로는 문법적으로 오류가 없지만 값이 넘어오지 않는다

주말 과제
-> 답글 기능
-> 수정 하기 (업로드 되어있는 파일리스트 뜨게하고, 기존의 파일 삭제 가능하게..)
-> 수정 하기에도 비동기 업로드로 (기존의 파일삭제했나 유무 체크후 처리)

